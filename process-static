#!/bin/bash

set -o errexit -o nounset -o pipefail
shopt -s dotglob extglob globstar

export PATH="$PWD/node_modules/.bin:$PATH"

rm -rf nginx-tmp
cp -a nginx nginx-tmp

rm -rf static-tmp
cp -a static static-tmp
rm -rf static-tmp/js/fastboot/{!(dist),dist/!(fastboot.min.mjs|fastboot.min.mjs.map|vendor)}
mv static-tmp/js/fastboot/dist static-tmp/js/fastboot/v1.1.1

for file in static-tmp/**/*.@(json|webmanifest); do
    json_verify < "$file" >/dev/null
    json_reformat -m < "$file" | sponge "$file"
done

stylelint static-tmp/**/*.css
find static-tmp -name '*.css' -exec csso {} -o {} \;

eslint static-tmp/**/!(fastboot.min.m|z-worker-pako.|pako_inflate.min.|)js
find static-tmp -name '*.js' -exec terser --ecma 2021 --module -cmo {} {} \;

replace=""
for file in static-tmp/**/*.css static-tmp/js/*.js static-tmp/mask-icon.svg; do
    hash=$(sha256sum "$file" | head -c 8)
    sri_hash=sha256-$(openssl dgst -sha256 -binary "$file" | openssl base64 -A)
    dest="$(dirname $file)/$hash.$(basename $file)"

    if [[ $file == *.css ]]; then
        replace+=";s@{{css|/${file#*/}}}@<link rel=\"stylesheet\" href=\"/${dest#*/}\" integrity=\"$sri_hash\"/>@g"
    elif [[ $file == *.js ]]; then
        replace+=";s@{{js|/${file#*/}}}@<script type=\"module\" src=\"/${dest#*/}\" integrity=\"$sri_hash\"></script>@g"
    fi

    mv "$file" "$dest"
    replace+=";s@{{integrity|/${file#*/}}}@${sri_hash}@g"
    replace+=";s@{{path|/${file#*/}}}@/${dest#*/}@g"
done

sed -i "$replace" static-tmp/**/*.html nginx-tmp/nginx.conf nginx-tmp/snippets/preload.conf

gixy nginx-tmp/nginx.conf

xmllint --noout static-tmp/**/*.html
validatornu --Werror --also-check-css --also-check-svg static-tmp/**/!(bimi).@(css|html|svg)
find static-tmp -name '*.html' -exec html-minifier --collapse-whitespace \
    --process-scripts "application/ld+json" --collapse-boolean-attributes \
    --remove-attribute-quotes --remove-comments --remove-empty-attributes \
    --remove-redundant-attributes --remove-script-type-attributes \
    --remove-style-link-type-attributes --sort-attributes --sort-class-name {} -o {} \;

./generate-feed.py

for file in static-tmp/**/*.@(atom|xml); do
    xmllint --noblanks "$file" --output "$file"
done

brotli_k() {
    brotli -k "$@"
}
export -f brotli_k

zopfli_preserve_time() {
    zopfli "$1"
    touch -r "$1" "$1.gz"
}
export -f zopfli_preserve_time

find static-tmp -regex '.+\.\(atom\|css\|html\|ico\|js\|json\|mjs\|pdf\|svg\|txt\|webmanifest\|xml\)' |
    parallel -q ::: brotli_k zopfli_preserve_time :::: -
